/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.intelaf.UI;

import com.mycompany.intelaf.Backend.ConnectionMysql;
import com.mycompany.intelaf.Backend.Empleado;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jara
 */
public class JFNewUserE extends javax.swing.JFrame {
    Connection cn = ConnectionMysql.conector();
    PreparedStatement ps;
    Statement st;
    ResultSet rs;
    DefaultTableModel model = new DefaultTableModel();
    TableRowSorter trs;
    String codigoE;
    String nombreE;
    String DPIE;
    String NITE;
    String EmailE;
    String DireccionE;
    String telefonoE;
    
    /**
     * Creates new form JFNewUserE
     */
    public JFNewUserE() {
        super("Nueva Empleado");
        this.setIconImage(new ImageIcon(getClass().getResource("/Images/logointelaf.png")).getImage());
        initComponents();
        listarEmpleados();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtCodigoE = new javax.swing.JTextField();
        txtNombreE = new javax.swing.JTextField();
        txtDPIE = new javax.swing.JTextField();
        txtNITE = new javax.swing.JTextField();
        txtEmailE = new javax.swing.JTextField();
        txtDireccionE = new javax.swing.JTextField();
        txtTelefonoE = new javax.swing.JTextField();
        btnCrearE = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaEmpleado = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        txtFiltrarE = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 81, 0));
        jPanel1.setLayout(null);

        jLabel1.setText("Para crear el nuevo empleado llene los campos siguientes.");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(34, 10, 380, 19);

        jLabel2.setText("Los campos con * son obligatorios");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(40, 40, 240, 19);

        jLabel3.setText("Codigo Empleado *");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 70, 130, 19);

        jLabel4.setText("Nombre *");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 140, 80, 19);

        jLabel5.setText("DPI *");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 210, 60, 19);

        jLabel6.setText("NIT");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(10, 280, 22, 19);

        jLabel7.setText("Email *");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(260, 70, 60, 19);

        jLabel8.setText("Direccion *");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(260, 140, 90, 19);

        jLabel9.setText("Telefono *");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(260, 210, 80, 19);
        jPanel1.add(txtCodigoE);
        txtCodigoE.setBounds(10, 90, 190, 31);
        jPanel1.add(txtNombreE);
        txtNombreE.setBounds(10, 160, 190, 31);
        jPanel1.add(txtDPIE);
        txtDPIE.setBounds(10, 230, 190, 31);
        jPanel1.add(txtNITE);
        txtNITE.setBounds(10, 300, 190, 31);
        jPanel1.add(txtEmailE);
        txtEmailE.setBounds(260, 90, 180, 31);
        jPanel1.add(txtDireccionE);
        txtDireccionE.setBounds(260, 160, 180, 31);
        jPanel1.add(txtTelefonoE);
        txtTelefonoE.setBounds(260, 230, 180, 31);

        btnCrearE.setText("Crear Empleado");
        btnCrearE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearEActionPerformed(evt);
            }
        });
        jPanel1.add(btnCrearE);
        btnCrearE.setBounds(260, 280, 180, 27);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(btnLimpiar);
        btnLimpiar.setBounds(260, 330, 180, 27);

        tablaEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaEmpleado);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(490, 10, 490, 310);

        jLabel10.setText("Filtrar Tabla");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(500, 340, 100, 19);

        txtFiltrarE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltrarEKeyTyped(evt);
            }
        });
        jPanel1.add(txtFiltrarE);
        txtFiltrarE.setBounds(620, 340, 250, 31);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtFiltrarEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltrarEKeyTyped
        txtFiltrarE.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent ky) {
                trs.setRowFilter(RowFilter.regexFilter("(?i)" + txtFiltrarE.getText(), 0, 1));
            }
        });
        trs = new TableRowSorter(model);
        tablaEmpleado.setRowSorter(trs);
    }//GEN-LAST:event_txtFiltrarEKeyTyped

    private void btnCrearEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearEActionPerformed
        codigoE= txtCodigoE.getText();
        nombreE= txtNombreE.getText();
        DPIE = txtDPIE.getText();
        NITE = txtNITE.getText();
        EmailE= txtEmailE.getText();
        DireccionE = txtDireccionE.getText();
        telefonoE = txtTelefonoE.getText();
        
        Empleado emp = new Empleado(codigoE, nombreE, DPIE, NITE, EmailE, DireccionE, telefonoE);
        
        if (txtCodigoE.getText().isEmpty()||txtNombreE.getText().isEmpty()||txtDPIE.getText().isEmpty()||txtEmailE.getText().isEmpty()||txtDireccionE.getText().isEmpty()||txtTelefonoE.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debes llenar todos los campos obligatorios");
        } else {
        String sql="SELECT id_empleado, dpi FROM empleado WHERE id_empleado=? OR dpi=?";
            try {
                ps = cn.prepareStatement(sql);
                ps.setString(1, emp.getIdEmpleado());
                ps.setString(2, emp.getDpiEmpleado());
                rs = ps.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "El empleado que ingreso ya existe!");                    
                } else {
                    String sql1="INSERT INTO empleado VALUES(?,?,?,?,?,?,?)";
                    try {
                        ps = cn.prepareStatement(sql1);
                        ps.setString(1, emp.getIdEmpleado());
                        ps.setString(2, emp.getNombreEmpleado());
                        ps.setString(3, emp.getDpiEmpleado());
                        ps.setString(4, emp.getNitEmpleado());
                        ps.setString(5, emp.getEmailE());
                        ps.setString(6, emp.getDireccionE());
                        ps.setString(7, emp.getTelefonoE());
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Empleado agregado con exito!");
                        limpiarLista();
                        listarEmpleados();
                    } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Error al agregar el nuevo empleado!");
                    }
                }
                
            } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Fallo al obtener empleados existentes: "+e);
            }
        }
        
        
    }//GEN-LAST:event_btnCrearEActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtCodigoE.setText("");
        txtNombreE.setText("");
        txtDPIE.setText("");
        txtNITE.setText("");
        txtDireccionE.setText("");
        txtEmailE.setText("");
        txtTelefonoE.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrearE;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaEmpleado;
    private javax.swing.JTextField txtCodigoE;
    private javax.swing.JTextField txtDPIE;
    private javax.swing.JTextField txtDireccionE;
    private javax.swing.JTextField txtEmailE;
    private javax.swing.JTextField txtFiltrarE;
    private javax.swing.JTextField txtNITE;
    private javax.swing.JTextField txtNombreE;
    private javax.swing.JTextField txtTelefonoE;
    // End of variables declaration//GEN-END:variables
    private void listarEmpleados() {
        String sql = "SELECT id_empleado, nombre, dpi FROM empleado GROUP BY id_empleado ASC";
        rs = getTable(sql);
        model.setColumnIdentifiers(new Object[]{"ID Empleado", "Nombre","DPI"});
        try {
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("id_empleado"), rs.getString("nombre"), rs.getString("dpi")});
            }
            tablaEmpleado.setModel(model);
        } catch (SQLException e) {
            System.out.println("Error al ingresar datos a la tabla: " + e);
        }

    }

    public ResultSet getTable(String consulta) {
        try {
            st = cn.createStatement();
            rs = st.executeQuery(consulta);
        } catch (SQLException e) {
            System.out.println("Error al obtener datos para la tabla: " + e);
        }
        return rs;
    }

    public void limpiarLista() {
        model = (DefaultTableModel) tablaEmpleado.getModel();
        int a = tablaEmpleado.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            model.removeRow(model.getRowCount() - 1);
        }
    }
}
