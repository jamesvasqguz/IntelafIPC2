/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.intelaf.UI;

import com.mycompany.intelaf.Backend.ConnectionMysql;
import com.mycompany.intelaf.Backend.Producto;
import com.mycompany.intelaf.Backend.Suministra;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jara
 */
public class JFCreateProduct extends javax.swing.JFrame {

    Connection cn = ConnectionMysql.conector();
    PreparedStatement ps;
    Statement st;
    ResultSet rs;
    DefaultTableModel model = new DefaultTableModel();
    TableRowSorter trs;
    String nombre;
    String fabricante;
    String codigo;
    int cantidad;
    double precio;
    String descripcion;
    int garantia;
    String tiendaO;

    /**
     * Creates new form JFCreateProduct
     */
    public JFCreateProduct() {
        super("Nuevo Producto");
        this.setIconImage(new ImageIcon(getClass().getResource("/Images/logointelaf.png")).getImage());
        initComponents();
        listarProductos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtProducto = new javax.swing.JTextField();
        txtFabricante = new javax.swing.JTextField();
        txtCodigoProducto = new javax.swing.JTextField();
        txtCantProducto = new javax.swing.JTextField();
        txtPrecioProducto = new javax.swing.JTextField();
        txtGarantiaP = new javax.swing.JTextField();
        txtDescP = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaProducto = new javax.swing.JTable();
        txtTiendaO = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        txtFiltrarPcto = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 81, 0));
        jPanel1.setLayout(null);

        jLabel1.setText("Crear Nuevo Producto");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(40, 10, 320, 19);

        jLabel2.setText("Todos los campos que tengan * son obligatorios");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 30, 320, 19);

        jLabel3.setText("Nombre *");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(10, 60, 120, 19);

        jLabel4.setText("Fabricante *");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(10, 130, 120, 19);

        jLabel5.setText("Codigo *");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(10, 200, 100, 19);

        jLabel6.setText("Cantidad *");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(10, 270, 100, 19);

        jLabel7.setText("Precio *");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(10, 340, 70, 19);

        jLabel8.setText("Descripcion");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(250, 60, 80, 19);

        jLabel9.setText("Garantia");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(250, 130, 53, 19);
        jPanel1.add(txtProducto);
        txtProducto.setBounds(10, 80, 180, 31);
        jPanel1.add(txtFabricante);
        txtFabricante.setBounds(10, 150, 180, 31);
        jPanel1.add(txtCodigoProducto);
        txtCodigoProducto.setBounds(10, 220, 180, 31);
        jPanel1.add(txtCantProducto);
        txtCantProducto.setBounds(10, 290, 180, 31);
        jPanel1.add(txtPrecioProducto);
        txtPrecioProducto.setBounds(10, 360, 180, 31);
        jPanel1.add(txtGarantiaP);
        txtGarantiaP.setBounds(250, 150, 150, 31);
        jPanel1.add(txtDescP);
        txtDescP.setBounds(250, 80, 150, 31);

        jButton1.setText("Crear Producto");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1);
        jButton1.setBounds(270, 280, 110, 40);

        jButton2.setText("Limpiar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2);
        jButton2.setBounds(270, 340, 110, 40);

        tablaProducto.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tablaProducto);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(450, 10, 530, 300);
        jPanel1.add(txtTiendaO);
        txtTiendaO.setBounds(250, 220, 150, 31);

        jLabel10.setText("Ingresar en Tienda *");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(250, 200, 150, 19);

        jLabel11.setText("Filtrar Tabla");
        jPanel1.add(jLabel11);
        jLabel11.setBounds(450, 350, 100, 19);

        txtFiltrarPcto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltrarPctoKeyTyped(evt);
            }
        });
        jPanel1.add(txtFiltrarPcto);
        txtFiltrarPcto.setBounds(570, 350, 220, 31);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1000, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        nombre = txtProducto.getText();
        fabricante = txtFabricante.getText();
        codigo = txtCodigoProducto.getText();
        cantidad = Integer.parseInt(txtCantProducto.getText());
        precio = Double.parseDouble(txtPrecioProducto.getText());
        descripcion = txtDescP.getText();
        garantia = Integer.parseInt(txtGarantiaP.getText());
        tiendaO = txtTiendaO.getText();

        if (txtProducto.getText().isEmpty() || txtFabricante.getText().isEmpty() || txtCodigoProducto.getText().isEmpty() || txtCantProducto.getText().isEmpty() || txtPrecioProducto.getText().isEmpty() || txtTiendaO.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe de llenar todos los campos obligatorios");
        } else {
            Producto pdt = new Producto(codigo, nombre, fabricante, cantidad, precio, descripcion, garantia);
            Suministra sta = new Suministra(0, tiendaO, codigo, nombre, cantidad);
            String sql = "SELECT producto, nombre_producto, tienda FROM suministra WHERE producto=? AND nombre_producto=? AND tienda=?";
            try {
                ps = cn.prepareStatement(sql);
                ps.setString(1, sta.getProducto());
                ps.setString(2, sta.getNombre());
                ps.setString(3, sta.getTienda());
                rs = ps.executeQuery();
                if (rs.next()) {
                    String sql1 = "INSERT INTO suministra VALUES(?,?,?,?,?)";
                    try {
                        ps = cn.prepareStatement(sql1);
                        ps.setInt(1, 0);
                        ps.setString(2, sta.getTienda());
                        ps.setString(3, sta.getNombre());
                        ps.setString(4, sta.getProducto());
                        ps.setInt(5, sta.getCantidadT());
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "El producto ya existia solo se agrego el producto a la tienda");
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "No se puede agregar producto a la tienda");
                    }
                } else {
                    String sql2 = "INSERT INTO producto VALUES(?,?,?,?,?,?,?)";
                    try {
                        ps = cn.prepareStatement(sql2);
                        ps.setString(1, pdt.getCodigo());
                        ps.setString(2, pdt.getNombreP());
                        ps.setString(3, pdt.getFabricante());
                        ps.setInt(4, pdt.getCantidad());
                        ps.setDouble(5, pdt.getPrecio());
                        ps.setString(6, pdt.getDescripcion());
                        ps.setInt(7, pdt.getGarantia());
                        ps.executeUpdate();
                    } catch (SQLException e) {
                        System.out.println("Error al ingresar los archivos en la base de datos: " + e);
                        JOptionPane.showMessageDialog(null, "Error al insertar archivos!!!!!");
                    }

                    String sql3 = "INSERT INTO suministra VALUES(?,?,?,?,?)";
                    try {
                        ps = cn.prepareStatement(sql3);
                        ps.setInt(1, 0);
                        ps.setString(2, sta.getTienda());
                        ps.setString(3, sta.getNombre());
                        ps.setString(4, sta.getProducto());
                        ps.setInt(5, sta.getCantidadT());
                        ps.executeUpdate();
                    } catch (SQLException e) {
                        System.out.println("Error al ingresar los archivos en la base de datos: " + e);
                        JOptionPane.showMessageDialog(null, "Error al insertar archivos!!!!!");
                    }
                    limpiarLista();
                    listarProductos();
                    JOptionPane.showMessageDialog(null, "Creacion de nuevo producto con exito!");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Fallo al intentar verificar registros!");
            }
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        txtProducto.setText("");
        txtFabricante.setText("");
        txtCodigoProducto.setText("");
        txtDescP.setText("");
        txtPrecioProducto.setText("");
        txtGarantiaP.setText("");
        txtCantProducto.setText("");
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtFiltrarPctoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltrarPctoKeyTyped
        txtFiltrarPcto.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent ky) {
                trs.setRowFilter(RowFilter.regexFilter("(?i)" + txtFiltrarPcto.getText(), 0, 1, 2));
            }
        });
        trs = new TableRowSorter(model);
        tablaProducto.setRowSorter(trs);
    }//GEN-LAST:event_txtFiltrarPctoKeyTyped

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaProducto;
    private javax.swing.JTextField txtCantProducto;
    private javax.swing.JTextField txtCodigoProducto;
    private javax.swing.JTextField txtDescP;
    private javax.swing.JTextField txtFabricante;
    private javax.swing.JTextField txtFiltrarPcto;
    private javax.swing.JTextField txtGarantiaP;
    private javax.swing.JTextField txtPrecioProducto;
    private javax.swing.JTextField txtProducto;
    private javax.swing.JTextField txtTiendaO;
    // End of variables declaration//GEN-END:variables
    private void listarProductos() {
        String sql = "SELECT S.producto, S.nombre_producto, S.tienda, S.cantidad_tienda FROM suministra S JOIN producto P ON S.producto=P.codigo_producto AND S.nombre_producto =P.nombre";
        rs = getTable(sql);
        model.setColumnIdentifiers(new Object[]{"ID Producto", "Nombre", "Tienda", "Cantidad"});
        try {
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("producto"), rs.getString("nombre_producto"), rs.getString("tienda"), rs.getInt("cantidad_tienda")});
            }
            tablaProducto.setModel(model);
        } catch (SQLException e) {
            System.out.println("Error al ingresar datos a la tabla: " + e);
        }

    }

    public ResultSet getTable(String consulta) {
        try {
            st = cn.createStatement();
            rs = st.executeQuery(consulta);
        } catch (SQLException e) {
            System.out.println("Error al obtener datos para la tabla: " + e);
        }
        return rs;
    }

    public void limpiarLista() {
        model = (DefaultTableModel) tablaProducto.getModel();
        int a = tablaProducto.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            model.removeRow(model.getRowCount() - 1);
        }
    }
}
