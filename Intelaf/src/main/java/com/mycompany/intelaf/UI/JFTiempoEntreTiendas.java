/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.intelaf.UI;

import com.mycompany.intelaf.Backend.ConnectionMysql;
import com.mycompany.intelaf.Backend.Tiempo;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jara
 */
public class JFTiempoEntreTiendas extends javax.swing.JFrame {

    Connection cn = ConnectionMysql.conector();
    PreparedStatement ps;
    ResultSet rs;
    Statement st;
    DefaultTableModel model = new DefaultTableModel();
    TableRowSorter trs;
    String tiendaO;
    String tiendaD;
    int TiempoET;

    /**
     * Creates new form JFTiempoEntreTiendas
     */
    public JFTiempoEntreTiendas() {
        super("Tiempo Entre Tiendas");
        this.setIconImage(new ImageIcon(getClass().getResource("/Images/logointelaf.png")).getImage());       
        initComponents();
        txtTiendaO.setText(JFChooseStore.TiendaSelect);
        listarTiempos();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        btnCrearTET = new javax.swing.JButton();
        txtTiendaO = new javax.swing.JTextField();
        txtTiendaD = new javax.swing.JTextField();
        txtTiempoET = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableTET = new javax.swing.JTable();
        btnLimpiarTET = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 81, 0));
        jPanel1.setLayout(null);

        jLabel1.setText("Crear Tiempo entre Tiendas");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 20, 250, 30);

        jLabel2.setText("Tienda Actual");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(30, 70, 110, 19);

        jLabel3.setText("Tienda Destino");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(30, 150, 110, 19);

        jLabel4.setText("Tiempo entre Tiendas");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(30, 230, 160, 19);

        btnCrearTET.setText("Crear Tiempo");
        btnCrearTET.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearTETActionPerformed(evt);
            }
        });
        jPanel1.add(btnCrearTET);
        btnCrearTET.setBounds(30, 310, 100, 50);
        jPanel1.add(txtTiendaO);
        txtTiendaO.setBounds(30, 100, 210, 31);
        jPanel1.add(txtTiendaD);
        txtTiendaD.setBounds(30, 180, 210, 31);
        jPanel1.add(txtTiempoET);
        txtTiempoET.setBounds(30, 260, 210, 31);

        tableTET.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableTET);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(270, 20, 390, 330);

        btnLimpiarTET.setText("Limpiar");
        btnLimpiarTET.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarTETActionPerformed(evt);
            }
        });
        jPanel1.add(btnLimpiarTET);
        btnLimpiarTET.setBounds(150, 310, 90, 50);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 700, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearTETActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearTETActionPerformed
        crearTET();
    }//GEN-LAST:event_btnCrearTETActionPerformed

    private void btnLimpiarTETActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarTETActionPerformed
        txtTiendaD.setText("");
        txtTiempoET.setText("");
    }//GEN-LAST:event_btnLimpiarTETActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrearTET;
    private javax.swing.JButton btnLimpiarTET;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableTET;
    private javax.swing.JTextField txtTiempoET;
    private javax.swing.JTextField txtTiendaD;
    private javax.swing.JTextField txtTiendaO;
    // End of variables declaration//GEN-END:variables
public void crearTET() {
        if (txtTiendaO.getText().isEmpty() || txtTiendaD.getText().isEmpty() || txtTiempoET.getText().isEmpty()) {
            System.out.println("Debe de llenar los datos requeridos");
        } else {
            tiendaO = txtTiendaO.getText();
            tiendaD = txtTiendaD.getText();
            TiempoET = Integer.parseInt(txtTiempoET.getText());

            Tiempo tmp = new Tiempo(0, tiendaO, tiendaD, TiempoET);

            String sql = "SELECT * FROM tiempo WHERE tienda_1=? AND tienda_2=?";
            try {
                ps = cn.prepareStatement(sql);
                ps.setString(1, tmp.getTienda1());
                ps.setString(2, tmp.getTienda2());
                rs = ps.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "Este tiempo entre tiendas ya existe! ");
                } else {
                    String sql1 = "INSERT INTO tiempo VALUES(?,?,?,?)";
                    try {
                        ps = cn.prepareStatement(sql1);
                        ps.setInt(1, 0);
                        ps.setString(2, tmp.getTienda1());
                        ps.setString(3, tmp.getTienda2());
                        ps.setInt(4, tmp.getTiempoPedido());
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Tiempo Entre Tiendas Creado Con Exito!");
                        limpiarLista();
                        listarTiempos();
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(null, "Problema al agregar el nuevo tiempo!");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "NO SE ENCONTRARON REGISTROS");
            }
        }
    }

    private void listarTiempos() {
        String sql = "SELECT id_tiempo, tienda_1, tienda_2,tiempo_pedido FROM tiempo ORDER BY tiempo_pedido DESC";
        rs = getTable(sql);
        model.setColumnIdentifiers(new Object[]{"ID", "Tienda Origen", "Tienda Destino", "Tiempo"});
        try {
            while (rs.next()) {
                model.addRow(new Object[]{rs.getInt("id_tiempo"), rs.getString("tienda_1"), rs.getString("tienda_2"), rs.getInt("tiempo_pedido")});
            }
            tableTET.setModel(model);
        } catch (SQLException e) {
            System.out.println("Error al ingresar datos a la tabla: " + e);
        }
    }

    public ResultSet getTable(String consulta) {
        try {
            st = cn.createStatement();
            rs = st.executeQuery(consulta);
        } catch (SQLException e) {
            System.out.println("Error al obtener datos para la tabla: " + e);
        }
        return rs;
    }

    public void limpiarLista() {
        model = (DefaultTableModel) tableTET.getModel();
        int a = tableTET.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            model.removeRow(model.getRowCount() - 1);
        }
        //cargaTicket();
    }
}
