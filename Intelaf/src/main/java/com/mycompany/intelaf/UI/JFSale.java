/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.intelaf.UI;

import com.mycompany.intelaf.Backend.ConnectionMysql;
import com.mycompany.intelaf.Backend.Venta;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jara
 */
public class JFSale extends javax.swing.JFrame {

    Connection cn = ConnectionMysql.conector();
    PreparedStatement ps;
    ResultSet rs;
    DefaultTableModel model = new DefaultTableModel();
    public static String producto;
    public static String nitC;
    public static int cantP;
    public static String fecha;
    String tienda;
    String empleado;
    int cantidadEnTienda;
    double total;
    double creditoC;
    double efectivo;
    double pagoCredito;
    double precioP;

    /**
     * Creates new form JFSale
     */
    public JFSale() {
        super("Venta");
        this.setIconImage(new ImageIcon(getClass().getResource("/Images/logointelaf.png")).getImage());
        initComponents();
        setSize(1200, 530);
        labelAlert.setVisible(false);
        btnPedido.setVisible(false);
        labelC.setVisible(false);
        txtCreditoC.setVisible(false);
        labelPC.setVisible(false);
        txtPagoCredito.setVisible(false);
        txtTiendaA.setText(JFChooseStore.TiendaSelect);
        txtTiendaA.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        labelC = new javax.swing.JLabel();
        checkBoxPC = new javax.swing.JCheckBox();
        labelPC = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        btnPedido = new javax.swing.JButton();
        btnVenta = new javax.swing.JButton();
        txtTiendaA = new javax.swing.JTextField();
        txtCodigoP = new javax.swing.JTextField();
        txtCantP = new javax.swing.JTextField();
        txtNITC = new javax.swing.JTextField();
        txtCreditoC = new javax.swing.JTextField();
        txtPagoCredito = new javax.swing.JTextField();
        labelAlert = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtEmpleado = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableListar = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        txtFecha = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 81, 0));
        jPanel1.setLayout(null);

        jLabel1.setText("Registrar Venta");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(170, 10, 130, 19);

        jLabel2.setText("Codigo de poducto *");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(20, 140, 150, 19);

        jLabel3.setText("NIT * ");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 290, 44, 19);

        jLabel4.setText("Tienda *");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 60, 90, 19);

        labelC.setText("Credito del cliente");
        jPanel1.add(labelC);
        labelC.setBounds(340, 160, 112, 19);

        checkBoxPC.setText("Ver credito del cliente");
        checkBoxPC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkBoxPCMouseClicked(evt);
            }
        });
        checkBoxPC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkBoxPCActionPerformed(evt);
            }
        });
        jPanel1.add(checkBoxPC);
        checkBoxPC.setBounds(340, 130, 150, 21);

        labelPC.setText("Cuanto desea pagar con credito");
        jPanel1.add(labelPC);
        labelPC.setBounds(340, 220, 195, 19);

        jLabel7.setText("Cantidad *");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(20, 220, 90, 19);

        btnPedido.setText("Pedido");
        btnPedido.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPedidoActionPerformed(evt);
            }
        });
        jPanel1.add(btnPedido);
        btnPedido.setBounds(360, 380, 120, 27);

        btnVenta.setText("Agregar Producto");
        btnVenta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentaActionPerformed(evt);
            }
        });
        jPanel1.add(btnVenta);
        btnVenta.setBounds(200, 420, 130, 50);
        jPanel1.add(txtTiendaA);
        txtTiendaA.setBounds(20, 80, 180, 31);
        jPanel1.add(txtCodigoP);
        txtCodigoP.setBounds(20, 160, 120, 31);
        jPanel1.add(txtCantP);
        txtCantP.setBounds(20, 240, 120, 31);
        jPanel1.add(txtNITC);
        txtNITC.setBounds(20, 310, 120, 31);
        jPanel1.add(txtCreditoC);
        txtCreditoC.setBounds(340, 180, 180, 31);
        jPanel1.add(txtPagoCredito);
        txtPagoCredito.setBounds(340, 240, 190, 31);

        labelAlert.setText(" Productos insuficientes en tienda, debe realizar un pedido.");
        jPanel1.add(labelAlert);
        labelAlert.setBounds(240, 360, 370, 20);

        jLabel6.setText("Todos los campo son obligatorios");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(120, 30, 202, 19);
        jPanel1.add(txtEmpleado);
        txtEmpleado.setBounds(340, 80, 180, 31);

        jLabel8.setText("Empleado: ");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(340, 60, 120, 19);

        tableListar.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableListar);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(620, 20, 560, 430);

        jLabel5.setText("Fecha(Ejem. a√±o-mes-dia) *");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(340, 290, 180, 19);
        jPanel1.add(txtFecha);
        txtFecha.setBounds(340, 310, 190, 31);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1200, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 530, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void checkBoxPCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkBoxPCActionPerformed

    }//GEN-LAST:event_checkBoxPCActionPerformed

    private void btnVentaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentaActionPerformed

        tienda = txtTiendaA.getText();
        empleado = txtEmpleado.getText();
        producto = txtCodigoP.getText();
        cantP = Integer.parseInt(txtCantP.getText());
        nitC = txtNITC.getText();
        fecha = txtFecha.getText();

        if (txtPagoCredito.getText().isEmpty()) {
            pagoCredito = 0;
        } else {
            pagoCredito = Double.parseDouble(txtPagoCredito.getText());
        }

        String sql = "SELECT cantidad_tienda FROM suministra WHERE tienda=? AND producto=?";
        String sql2 = "INSERT INTO venta VALUES(?,?,?,?,?,?,?,?,?,?)";
        precioProducto();
        try {
            ps = cn.prepareStatement(sql);
            ps.setString(1, tienda);
            ps.setString(2, producto);
            rs = ps.executeQuery();
            if (rs.next()) {
                cantidadEnTienda = rs.getInt("cantidad_tienda");
                System.out.println("Cantidad en tienda: " + cantidadEnTienda);
                if (cantP >= cantidadEnTienda) {
                    JOptionPane.showMessageDialog(null, "CANTIDAD INSUFICIENTE REALIZAR PEDIDO!!");
                    labelAlert.setVisible(true);
                    btnPedido.setVisible(true);
                } else {
                    total = precioP * cantP;
                    efectivo = total - pagoCredito;
                    Venta v = new Venta(0, tienda, empleado, nitC, producto, cantP, total, efectivo, pagoCredito, fecha);
                    System.out.println("fecha: " + fecha);
                    ps = cn.prepareStatement(sql2);
                    ps.setInt(1, 0);
                    ps.setString(2, v.getTiendaV());
                    ps.setString(3, v.getEmpleadoV());
                    ps.setString(4, v.getNitV());
                    ps.setString(5, v.getCodigoP());
                    ps.setInt(6, v.getCantidadP());
                    ps.setDouble(7, v.getTotalV());
                    ps.setDouble(8, v.getEfectivoV());
                    ps.setDouble(9, v.getCreditoV());
                    ps.setDate(10, Date.valueOf(fecha));
                    ps.executeUpdate();
                    limpiarLista();
                    listarVentas();
                    JOptionPane.showMessageDialog(null, "Venta agregada!");
                    actualizarCredito();
                    actualizarCantidad();
                    creditoActual();

                }
            } else {
                JOptionPane.showMessageDialog(null, "Esta tienda no cuenta con este producto");
            }

        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Fallo al registrar la venta");
        }
    }//GEN-LAST:event_btnVentaActionPerformed

    private void checkBoxPCMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkBoxPCMouseClicked
        labelC.setVisible(true);
        txtCreditoC.setVisible(true);
        labelPC.setVisible(true);
        txtPagoCredito.setVisible(true);
        creditoActual();
    }//GEN-LAST:event_checkBoxPCMouseClicked

    private void btnPedidoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPedidoActionPerformed
        JFOrder jo = new JFOrder();
        jo.setVisible(true);
    }//GEN-LAST:event_btnPedidoActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPedido;
    private javax.swing.JButton btnVenta;
    private javax.swing.JCheckBox checkBoxPC;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelAlert;
    private javax.swing.JLabel labelC;
    private javax.swing.JLabel labelPC;
    private javax.swing.JTable tableListar;
    private javax.swing.JTextField txtCantP;
    private javax.swing.JTextField txtCodigoP;
    private javax.swing.JTextField txtCreditoC;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JTextField txtFecha;
    private javax.swing.JTextField txtNITC;
    private javax.swing.JTextField txtPagoCredito;
    private javax.swing.JTextField txtTiendaA;
    // End of variables declaration//GEN-END:variables
public void creditoActual() {
        String sql1 = "SELECT credito FROM cliente WHERE nit=? ";
        try {
            ps = cn.prepareStatement(sql1);
            ps.setString(1, txtNITC.getText());
            rs = ps.executeQuery();
            if (rs.next()) {
                creditoC = rs.getDouble("credito");
                txtCreditoC.setText(String.valueOf(creditoC));
            } else {
                JOptionPane.showMessageDialog(null, "No se encontro credito del cliente");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Fallo al intentar obtener el credito del cliente");
        }
    }

    public void precioProducto() {
        String sql1 = "SELECT precio FROM producto WHERE codigo_producto=?";
        try {
            ps = cn.prepareStatement(sql1);
            ps.setString(1, producto);
            rs = ps.executeQuery();
            if (rs.next()) {
                precioP = rs.getDouble("precio");
                JOptionPane.showMessageDialog(null, "SE ENCONTRO EL PRECIO DEL PRODUCTO: " + precioP);
            } else {
                JOptionPane.showMessageDialog(null, "NO SE ENCONTRO EL PRECIO DEL PRODUCTO");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "FALLO AL INTENTAR OBTENER EL PRECIO" + e);
        }

    }

    private void listarVentas() {
        String sql = "SELECT nit, codigo_producto, cantidad_venta,total_a_pagar,fecha_venta FROM venta WHERE nit=?";
        model.setColumnIdentifiers(new Object[]{"NIT", "Producto", "Cantidad", "Total", "Fecha"});
        try {
            ps = cn.prepareStatement(sql);
            ps.setString(1, nitC);
            rs = ps.executeQuery();
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("nit"), rs.getString("codigo_producto"), rs.getInt("cantidad_venta"), rs.getDouble("total_a_pagar"), rs.getDate("fecha_venta")});
            }
            tableListar.setModel(model);
        } catch (SQLException e) {
            System.out.println("Error al ingresar datos a la tabla: " + e);
        }

    }

    public void limpiarLista() {
        model = (DefaultTableModel) tableListar.getModel();
        int a = tableListar.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            model.removeRow(model.getRowCount() - 1);
        }
    }

    public void actualizarCantidad() {
        String sql4 = "UPDATE suministra SET cantidad_tienda=? WHERE tienda=? AND producto=?";
        int nuevaCantidad = cantidadEnTienda - cantP;
        System.out.println("nueva cant: " + nuevaCantidad);
        try {
            ps = cn.prepareStatement(sql4);
            ps.setInt(1, nuevaCantidad);
            ps.setString(2, tienda);
            ps.setString(3, producto);
            ps.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "No se puede actualizar tienda!");
        }
    }

    public void actualizarCredito() {
        String sql5 = "UPDATE cliente SET credito=? WHERE nit=?";
        double nuevoCredito = creditoC - pagoCredito;
        try {
            ps = cn.prepareStatement(sql5);
            ps.setDouble(1, nuevoCredito);
            ps.setString(2, nitC);
            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Se actualizo el credito del cliente");
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "No se pudo actualizar el credito del cliente");
        }
        txtPagoCredito.setText("");
    }

}
