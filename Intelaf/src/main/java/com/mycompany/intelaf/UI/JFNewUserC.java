/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.intelaf.UI;

import com.mycompany.intelaf.Backend.Cliente;
import com.mycompany.intelaf.Backend.ConnectionMysql;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author jara
 */
public class JFNewUserC extends javax.swing.JFrame {

    Connection cn = ConnectionMysql.conector();
    PreparedStatement ps;
    Statement st;
    ResultSet rs;
    DefaultTableModel model = new DefaultTableModel();
    TableRowSorter trs;
    String nombreC;
    String nitC;
    String telefono;
    String dpiC;
    double creditoC;
    String emailC;
    String direccionC;

    /**
     * Creates new form JFNewUserC
     */
    public JFNewUserC() {
        super("Nuevo Cliente");
        this.setIconImage(new ImageIcon(getClass().getResource("/Images/logointelaf.png")).getImage());
        initComponents();
        txtCreditoC.setText("0");
        txtCreditoC.setEditable(false);
        listarClientes();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        txtNombreC = new javax.swing.JTextField();
        txtTelefonoC = new javax.swing.JTextField();
        txtNITC = new javax.swing.JTextField();
        txtDPIC = new javax.swing.JTextField();
        txtCreditoC = new javax.swing.JTextField();
        txtEmailC = new javax.swing.JTextField();
        txtDireccionC = new javax.swing.JTextField();
        btnCrearC = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableClientes = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();
        txtFiltrarTable = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 81, 0));
        jPanel1.setLayout(null);

        jLabel1.setText("Para crear el nuevo cliente debe llenar los campo siguientes");
        jPanel1.add(jLabel1);
        jLabel1.setBounds(30, 10, 380, 19);

        jLabel2.setText("Los campo con * son obligatorios ");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(40, 40, 240, 19);

        jLabel3.setText("Nombre * ");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(20, 70, 140, 19);

        jLabel4.setText("Telefono *");
        jPanel1.add(jLabel4);
        jLabel4.setBounds(20, 140, 65, 19);

        jLabel5.setText("NIT *");
        jPanel1.add(jLabel5);
        jLabel5.setBounds(20, 210, 32, 19);

        jLabel6.setText("DPI");
        jPanel1.add(jLabel6);
        jLabel6.setBounds(20, 280, 23, 19);

        jLabel7.setText("Credito(Inicialmente es 0)");
        jPanel1.add(jLabel7);
        jLabel7.setBounds(290, 70, 180, 19);

        jLabel8.setText("Email");
        jPanel1.add(jLabel8);
        jLabel8.setBounds(290, 140, 32, 19);

        jLabel9.setText("Direccion");
        jPanel1.add(jLabel9);
        jLabel9.setBounds(290, 210, 58, 19);
        jPanel1.add(txtNombreC);
        txtNombreC.setBounds(20, 90, 200, 31);
        jPanel1.add(txtTelefonoC);
        txtTelefonoC.setBounds(20, 160, 200, 31);
        jPanel1.add(txtNITC);
        txtNITC.setBounds(20, 230, 200, 31);
        jPanel1.add(txtDPIC);
        txtDPIC.setBounds(20, 300, 200, 31);
        jPanel1.add(txtCreditoC);
        txtCreditoC.setBounds(290, 90, 170, 31);
        jPanel1.add(txtEmailC);
        txtEmailC.setBounds(290, 160, 170, 31);
        jPanel1.add(txtDireccionC);
        txtDireccionC.setBounds(290, 230, 170, 31);

        btnCrearC.setText("Crear Cliente");
        btnCrearC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCrearCActionPerformed(evt);
            }
        });
        jPanel1.add(btnCrearC);
        btnCrearC.setBounds(290, 290, 170, 27);

        btnLimpiar.setText("Limpiar");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });
        jPanel1.add(btnLimpiar);
        btnLimpiar.setBounds(290, 340, 170, 27);

        tableClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tableClientes);

        jPanel1.add(jScrollPane1);
        jScrollPane1.setBounds(530, 10, 740, 310);

        jLabel10.setText("Filtrar Tabla");
        jPanel1.add(jLabel10);
        jLabel10.setBounds(530, 350, 100, 19);

        txtFiltrarTable.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtFiltrarTableKeyTyped(evt);
            }
        });
        jPanel1.add(txtFiltrarTable);
        txtFiltrarTable.setBounds(650, 340, 190, 31);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 1300, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCrearCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCrearCActionPerformed
        nombreC = txtNombreC.getText();
        nitC = txtNITC.getText();
        telefono = txtTelefonoC.getText();
        dpiC = txtDPIC.getText();
        creditoC = Double.parseDouble(txtCreditoC.getText());
        emailC = txtEmailC.getText();
        direccionC = txtDireccionC.getText();

        Cliente cliente = new Cliente(0, nombreC, nitC, telefono, dpiC, creditoC, emailC, direccionC);

        if (txtNombreC.getText().isEmpty() || txtNITC.getText().isEmpty() || txtTelefonoC.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Debe de llenar los campos obligatorios!");
        } else {
            String sql = "SELECT nombre, nit, telefono  FROM cliente WHERE nombre=? OR nit=? OR telefono=?";
            try {
                ps = cn.prepareStatement(sql);
                ps.setString(1, cliente.getNombreC() );
                ps.setString(2, cliente.getNitC() );
                ps.setString(3, cliente.getTelefono());
                rs = ps.executeQuery();
                if (rs.next()) {
                    JOptionPane.showMessageDialog(null, "El cliente que ingreso ya existe!");
                } else {
                    String sql1="INSERT INTO cliente VALUES(?,?,?,?,?,?,?,?)";
                    try {
                        ps = cn.prepareStatement(sql1);
                        ps.setInt(1, 0);
                        ps.setString(2, cliente.getNombreC());
                        ps.setString(3, cliente.getNitC());
                        ps.setString(4, cliente.getTelefono());
                        ps.setString(5, cliente.getDpiC());
                        ps.setDouble(6, cliente.getCreditoC());
                        ps.setString(7, cliente.getEmailC());
                        ps.setString(8, cliente.getDireccionC());
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(null, "Cliente creado con exito!");
                        limpiarLista();
                        listarClientes();
                    } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "Fallo al agregar al cliente!");
                    }
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error al intentar hacer el registro del cliente");

            }
        }
    }//GEN-LAST:event_btnCrearCActionPerformed

    private void txtFiltrarTableKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtFiltrarTableKeyTyped
        txtFiltrarTable.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent ky) {
                trs.setRowFilter(RowFilter.regexFilter("(?i)" + txtFiltrarTable.getText(), 0, 1));
            }
        });
        trs = new TableRowSorter(model);
        tableClientes.setRowSorter(trs);
    }//GEN-LAST:event_txtFiltrarTableKeyTyped

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        txtNombreC.setText("");
        txtTelefonoC.setText("");
        txtNITC.setText("");
        txtDPIC.setText("");
        txtEmailC.setText("");
        txtDireccionC.setText("");
    }//GEN-LAST:event_btnLimpiarActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCrearC;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableClientes;
    private javax.swing.JTextField txtCreditoC;
    private javax.swing.JTextField txtDPIC;
    private javax.swing.JTextField txtDireccionC;
    private javax.swing.JTextField txtEmailC;
    private javax.swing.JTextField txtFiltrarTable;
    private javax.swing.JTextField txtNITC;
    private javax.swing.JTextField txtNombreC;
    private javax.swing.JTextField txtTelefonoC;
    // End of variables declaration//GEN-END:variables
private void listarClientes() {
        String sql = "SELECT nit, nombre, telefono, dpi, credito, email, direccion FROM cliente GROUP BY nit ASC";
        rs = getTable(sql);
        model.setColumnIdentifiers(new Object[]{"NIT", "Nombre","Telefono","DPI","Credito","Email","Direccion"});
        try {
            while (rs.next()) {
                model.addRow(new Object[]{rs.getString("nit"), rs.getString("nombre"),rs.getString("telefono"),rs.getString("dpi"),rs.getDouble("credito"),rs.getString("email"),rs.getString("direccion")});
            }
            tableClientes.setModel(model);
        } catch (SQLException e) {
            System.out.println("Error al ingresar datos a la tabla: " + e);
        }

    }

    public ResultSet getTable(String consulta) {
        try {
            st = cn.createStatement();
            rs = st.executeQuery(consulta);
        } catch (SQLException e) {
            System.out.println("Error al obtener datos para la tabla: " + e);
        }
        return rs;
    }

    public void limpiarLista() {
        model = (DefaultTableModel) tableClientes.getModel();
        int a = tableClientes.getRowCount() - 1;
        for (int i = a; i >= 0; i--) {
            model.removeRow(model.getRowCount() - 1);
        }
    }
}
